// Mocks generated by Mockito 5.0.15 from annotations
// in shop/test/ui/products_overview_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;
import 'dart:ui' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:shop/providers/product.dart' as _i3;
import 'package:shop/providers/products.dart' as _i2;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

/// A class which mocks [Products].
///
/// See the documentation for Mockito's code generation for more information.
class MockProducts extends _i1.Mock implements _i2.Products {
  MockProducts() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i3.Product> get items => (super.noSuchMethod(Invocation.getter(#items),
      returnValue: <_i3.Product>[]) as List<_i3.Product>);
  @override
  List<_i3.Product> get favoriteItems =>
      (super.noSuchMethod(Invocation.getter(#favoriteItems),
          returnValue: <_i3.Product>[]) as List<_i3.Product>);
  @override
  int get itemsCount =>
      (super.noSuchMethod(Invocation.getter(#itemsCount), returnValue: 0)
          as int);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  _i4.Future<void> loadProducts() =>
      (super.noSuchMethod(Invocation.method(#loadProducts, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> addProduct(_i3.Product? newProduct) =>
      (super.noSuchMethod(Invocation.method(#addProduct, [newProduct]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> updateProduct(_i3.Product? product) =>
      (super.noSuchMethod(Invocation.method(#updateProduct, [product]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> deleteProduct(String? id) =>
      (super.noSuchMethod(Invocation.method(#deleteProduct, [id]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  String toString() => super.toString();
  @override
  void addListener(_i5.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i5.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}
